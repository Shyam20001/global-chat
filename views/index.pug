doctype html
html
  head
    title Chat App
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css')
    style.
      body {
        display: flex;
        flex-direction: column;
        height: 100vh;
        margin: 0;
        background-color: #121212;
        color: #E0E0E0;
        font-family: Arial, sans-serif;
      }
      form {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        width: 100%;
        max-width: 500px;
        margin: auto;
        z-index: 1; /* Ensure form stays above messages */
      }
      input, button {
        width: 100%;
        padding: 15px;
        margin: 10px 0;
        border-radius: 4px;
        font-size: 18px;
      }
      input {
        border: 1px solid #333;
        background-color: #2A2A2A;
        color: #E0E0E0;
      }
      button {
        border: none;
        background-color: #6200EE;
        color: #FFFFFF;
        cursor: pointer;
      }
      button:hover {
        background-color: #3700B3;
      }
      #messages-container {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-end; /* Align messages to bottom */
        padding: 10px;
        box-sizing: border-box;
        overflow-y: auto;
        max-height: calc(100vh - 180px); /* Adjust height based on other elements */
      }
      #messages {
        width: 100%;
        max-width: 500px;
        list-style-type: none;
        padding: 0;
      }
      #messages li {
        padding: 15px;
        margin: 10px 0;
        background-color: #1E1E1E;
        border-radius: 4px;
        word-wrap: break-word;
        font-size: 18px;
        color: white;
      }
      .user1 {
        color: #FF6347; /* Tomato */
      }
      .user2 {
        color: #1E90FF; /* DodgerBlue */
      }
      .user3 {
        color: #32CD32; /* LimeGreen */
      }
      #form-container {
        width: 100%;
        max-width: 500px;
        margin: auto;
        padding: 10px;
        box-sizing: border-box;
        position: fixed;
        bottom: 0;
        background-color: #1E1E1E;
        border-top: 1px solid #333;
        z-index: 2; /* Ensure form stays on top */
      }
      #input {
        width: calc(100% - 70px); /* Adjust input width */
        border: 1px solid #333;
        background-color: #2A2A2A;
        color: #E0E0E0;
        resize: none;
        font-size: 18px;
        padding: 15px;
        border-radius: 4px;
      }
      #send-button {
        width: 60px; /* Adjust send button width */
        margin-left: 10px;
        border: none;
        background-color: #6200EE;
        color: #FFFFFF;
        cursor: pointer;
        border-radius: 4px;
        font-size: 18px;
        padding: 15px;
      }
      /* Media Queries */
      @media (max-width: 768px) {
        input, button {
          font-size: 16px;
          padding: 12px;
        }
        #messages li {
          font-size: 16px;
          padding: 12px;
        }
        #input {
          font-size: 16px;
          padding: 12px;
        }
        #send-button {
          font-size: 16px;
          padding: 12px;
        }
      }
      @media (max-width: 480px) {
        input, button {
          font-size: 14px;
          padding: 10px;
        }
        #messages li {
          font-size: 14px;
          padding: 10px;
        }
        #input {
          font-size: 14px;
          padding: 10px;
        }
        #send-button {
          font-size: 14px;
          padding: 10px;
        }
      }
  body
    form(action='/login', id='login-form')
      input(type='text', id='username', placeholder='Username', required)
      input(type='password', id='password', placeholder='Password', required)
      button.btn.btn-primary Login
    div#messages-container
      ul#messages
    div#form-container
      form(action='', id='form')
        input(type='text', id='input', autocomplete='off')
        button#send-button.btn.btn-primary Send
    script(src='https://code.jquery.com/jquery-3.5.1.slim.min.js', integrity='sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj', crossorigin='anonymous')
    script(src='/socket.io/socket.io.js')
    script.
      document.addEventListener('DOMContentLoaded', () => {
        let socket;
        let authenticated = false;
        let username = '';

        const loginForm = document.getElementById('login-form');
        const chatForm = document.getElementById('form');
        const messagesContainer = document.getElementById('messages-container');
        const messages = document.getElementById('messages');
        const input = document.getElementById('input');

        chatForm.style.display = 'none'; // Ensure the chat form is hidden initially

        function login(event) {
          event.preventDefault();
          username = document.getElementById('username').value;
          const password = document.getElementById('password').value;

          fetch('/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Login failed');
            }
            return response.json();
          })
          .then(data => {
            if (data.token) {
              localStorage.setItem('token', data.token);
              authenticated = true;
              loginForm.style.display = 'none';
              chatForm.style.display = 'flex';
              socket = io({
                auth: {
                  token: data.token
                }
              });
              setupSocketListeners();
            } else {
              alert('Login failed');
            }
          })
          .catch(error => {
            alert(error.message);
          });
        }

        function setupSocketListeners() {
          socket.on('chat message', function(data) {
            const item = document.createElement('li');
            item.textContent = `${data.user}: ${data.msg}`;
            item.classList.add(data.user); // Add user-specific class for color coding
            messages.appendChild(item);
            scrollToBottom();
          });

          chatForm.addEventListener('submit', function(e) {
            e.preventDefault();
            sendMessage();
          });

          function sendMessage() {
            const message = input.value.trim();
            if (message) {
              socket.emit('chat message', message);
              input.value = '';
              scrollToBottom(); // Scroll to bottom after sending message
            }
          }

          function scrollToBottom() {
            // Delay scroll to ensure messages are rendered
            setTimeout(() => {
              messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
          }
        }

        loginForm.addEventListener('submit', login);
      });
